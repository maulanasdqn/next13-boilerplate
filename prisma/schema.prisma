// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  USER
  ADMIN
  SUPERADMIN
}

enum Permission {
  CREATE
  READ
  UPDATE
  DELETE
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  transactions  Transaction[]
  debtReport    DebtReport[]
  payments      Payment[]
  role          Roles         @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id              String   @id @default(cuid())
  price           Int
  transactionDate DateTime
  totalSelled     Int
  transactionTime String
  itemId          String
  item            Item     @relation(fields: [itemId], references: [id])
  paymentId       String   @unique
  payment         Payment  @relation(fields: [paymentId], references: [id])
  totalPrice      Int
  name            String
  paymentMethod   String
  userId          String
  createdDate     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model Payment {
  id           String       @id @default(cuid())
  price        Int
  details      String
  totalPayment Int
  name         String
  userId       String
  createdDate  DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction  Transaction?
}

model FinancialReport {
  id               String   @id @default(cuid())
  grossIncome      Int
  netIncome        Int
  operationalCosts Int
  details          String
  createdDate      DateTime @default(now())
}

model DebtReport {
  id          String   @id @default(cuid())
  userId      String
  totalItems  Int
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  priceItems  Int
  totalPrice  Int
  status      String
  payoffDate  DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  debt        Int
  details     String
  createdDate DateTime @default(now())
}

model Item {
  id           String        @id @default(cuid())
  name         String
  price        Int
  quantity     Int
  description  String
  transactions Transaction[]
  debts        DebtReport[]
  createdDate  DateTime      @default(now())
}
