import type { NextAuthOptions } from "next-auth";
import { DrizzleAdapter } from "@auth/drizzle-adapter";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import { TUser } from "@/entities";
import { db, roles, users } from "@/server";
import { eq } from "drizzle-orm";
import * as bs from "bcryptjs";

export const authOptions: NextAuthOptions = {
  adapter: DrizzleAdapter(db),
  pages: {
    signIn: "/auth/login",
  },
  session: {
    strategy: "jwt",
  },
  providers: [
    GoogleProvider({
      id: "google",
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    }),

    CredentialsProvider({
      id: "login",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials.password) {
          throw new Error("Email dan Password wajib diisi");
        }

        const query = await db
          .select()
          .from(users)
          .leftJoin(roles, eq(users.role_id, roles.id))
          .where(eq(users.email, credentials.email));
        const user = query.at(0);

        if (!user || !(await bs.compare(credentials.password, user?.app_users?.password))) {
          throw new Error("Email atau Password salah");
        }

        return {
          id: user.app_users.id,
          email: user.app_users.email,
          fullname: user.app_users.fullname,
          role: {
            id: user?.app_roles?.id,
            name: user?.app_roles?.name,
            permissions: user?.app_roles?.permissions,
          },
        };
      },
    }),
  ],

  callbacks: {
    async signIn({ account, profile }) {
      if (account?.provider === "google") {
        console.log("Profile", profile);
        console.log("Account", account);
      }
      return true;
    },

    session: ({ session, token }) => {
      return {
        ...session,
        user: {
          id: token.id,
          fullname: token.fullname,
          email: token.email,
          role: token.role,
        },
      };
    },

    jwt: ({ token, user, account, profile }) => {
      if (account?.provider === "google" && profile) {
        return {
          ...token,
          id: profile.sub,
          name: profile.name,
          email: profile.email,
          role: {
            id: "",
            name: "User",
            permissions: [],
          },
        };
      }

      if (account?.provider === "login" && user) {
        const u = user as TUser;
        return {
          ...token,
          id: u.id,
          fullname: u.fullname,
          email: u.email,
          role: {
            id: u.role.id,
            name: u.role.name,
            permissions: u.role.permissions,
          },
        };
      }
      return token;
    },
  },
};
